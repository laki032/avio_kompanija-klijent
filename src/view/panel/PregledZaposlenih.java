package view.panel;

import domain.zaposleni.Zaposleni;
import java.awt.Color;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableModel;
import model.Kontroler;
import util.Akcija;
import util.TransferKlasa;
import view.MainForm;
import view.table.TableModelZaposleni;

/**
 *
 * @author Lazar Vujadinovic
 */
public class PregledZaposlenih extends javax.swing.JPanel {

    /**
     * Creates new form PregledZaposlenih
     */
    public PregledZaposlenih() {
        initComponents();
        srediFormu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtblZaposleni = new javax.swing.JTable();
        jbtIzmena = new javax.swing.JButton();
        jbtBrisanje = new javax.swing.JButton();
        jComboKriterijum = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jtxtFilter = new javax.swing.JTextField();
        jbtResetujFilter = new javax.swing.JButton();
        lblPoruka = new javax.swing.JLabel();
        jbtUlogeLicence = new javax.swing.JButton();

        jtblZaposleni.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtblZaposleni.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtblZaposleniMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtblZaposleni);

        jbtIzmena.setText("Sacuvaj izmenu zaposlenog");
        jbtIzmena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtIzmenaActionPerformed(evt);
            }
        });

        jbtBrisanje.setText("Obrisi zaposlenog");
        jbtBrisanje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBrisanjeActionPerformed(evt);
            }
        });

        jComboKriterijum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboKriterijumItemStateChanged(evt);
            }
        });

        jLabel1.setText("Kriterijum pretrage:");

        jtxtFilter.setEditable(false);
        jtxtFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtFilterActionPerformed(evt);
            }
        });
        jtxtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtFilterKeyReleased(evt);
            }
        });

        jbtResetujFilter.setText("Resetuj filter");
        jbtResetujFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtResetujFilterActionPerformed(evt);
            }
        });

        lblPoruka.setText(" ");

        jbtUlogeLicence.setText("Prikazi detalje o zaposlenom");
        jbtUlogeLicence.setToolTipText("Prikaz rasporeda pilota po datumima i ulogama za odabrani avion");
        jbtUlogeLicence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtUlogeLicenceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboKriterijum, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtxtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtResetujFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtIzmena, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtBrisanje, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbtUlogeLicence, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPoruka, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jComboKriterijum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jtxtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jbtResetujFilter)
                        .addGap(17, 17, 17)
                        .addComponent(jbtIzmena)
                        .addGap(17, 17, 17)
                        .addComponent(jbtBrisanje)
                        .addGap(18, 18, 18)
                        .addComponent(jbtUlogeLicence)
                        .addGap(18, 18, 18)
                        .addComponent(lblPoruka, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jbtIzmenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtIzmenaActionPerformed
        lblPoruka.setText(" ");
        int r = jtblZaposleni.getSelectedRow();
        if (r < 0) {
            lblPoruka.setText("Morate prvo odabrati zaposlenog!");
            return;
        }
        Zaposleni z = new Zaposleni();
        z.setJmbg(jtblZaposleni.getValueAt(r, 0).toString());
        z.setImePrezime(jtblZaposleni.getValueAt(r, 1).toString());
        z.setGodinaRodjenja((int) jtblZaposleni.getValueAt(r, 2));

        try {
            TransferKlasa zahtev = new TransferKlasa();
            zahtev.setOperacija(Akcija.SACUVAJ_IZMENU_ZAPOSLENOG);
            zahtev.setParametar(z);
            Kontroler.getINSTANCE().posalji(zahtev);
            TransferKlasa odgovor = Kontroler.getINSTANCE().primi();
            JOptionPane.showMessageDialog(this, "Sistem je uspeo da sacuva izmenu zaposlenog", "Poruka", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtIzmenaActionPerformed

    private void jbtBrisanjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBrisanjeActionPerformed
        try {
            boolean ulogovan = (boolean) Kontroler.getINSTANCE().vratiIzMape("adminUlogovan");
            if (!ulogovan) {
                JOptionPane.showMessageDialog(this, "Da biste izvrsili operaciju brisanja, admin mora biti ulogovan!", "GRESKA", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception ex) {
        }
        lblPoruka.setText(" ");
        int r = jtblZaposleni.getSelectedRow();
        if (r < 0) {
            lblPoruka.setText("Morate prvo odabrati zaposlenog!");
            return;
        }
        Zaposleni z = new Zaposleni();
        z.setJmbg((String) jtblZaposleni.getValueAt(r, 0));

        try {
            TransferKlasa zahtev = new TransferKlasa();
            zahtev.setOperacija(Akcija.BRISI_ZAPOSLENOG);
            zahtev.setParametar(z);
            Kontroler.getINSTANCE().posalji(zahtev);
            TransferKlasa odgovor = Kontroler.getINSTANCE().primi();
            JOptionPane.showMessageDialog(this, "Sistem je uspeo da obrise zaposlenog", "Poruka", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
            lblPoruka.setText("Nije moguce obrisati.");
            return;
        }
        try {
            TransferKlasa zahtev = new TransferKlasa();
            zahtev.setOperacija(Akcija.VRATI_SVE_ZAPOSLENE);
            Kontroler.getINSTANCE().posalji(zahtev);
            TransferKlasa odgovor = Kontroler.getINSTANCE().primi();
            List<Zaposleni> zap = (List<Zaposleni>) odgovor.getRezultat();
            srediTabelu(zap);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem nije uspeo da ucita zaposlene.", "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtBrisanjeActionPerformed

    private void jComboKriterijumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboKriterijumItemStateChanged
        String izbor = jComboKriterijum.getSelectedItem().toString();
        if (izbor.startsWith("Bez")) {
            jtxtFilter.setEditable(false);
            jtxtFilter.setText("");
            srediTabelu(null);
            jtxtFilter.setBackground(Color.lightGray);
        } else {
            jtxtFilter.setEditable(true);
            jtxtFilter.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_jComboKriterijumItemStateChanged

    private void jtxtFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtFilterActionPerformed

    private void jtxtFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtFilterKeyReleased
        String polje = jComboKriterijum.getSelectedItem().toString();
        String filter = jtxtFilter.getText().toLowerCase();

        switch (polje) {
            case "JMBG":
                for (int i = listaZaposlenih.size() - 1; i >= 0; i--) {
                    if (!listaZaposlenih.get(i).getJmbg().contains(filter)) {
                        listaZaposlenih.remove(i);
                    }
                }
                break;
            case "Godina rodjenja":
                for (int i = listaZaposlenih.size() - 1; i >= 0; i--) {
                    if (!(listaZaposlenih.get(i).getGodinaRodjenja() + "").contains(filter)) {
                        listaZaposlenih.remove(i);
                    }
                }
                break;
            case "Ime i prezime":
                for (int i = listaZaposlenih.size() - 1; i >= 0; i--) {
                    if (!(listaZaposlenih.get(i).getImePrezime() + "").contains(filter)) {
                        listaZaposlenih.remove(i);
                    }
                }
                break;
        }

        srediTabelu(listaZaposlenih);
//        JOptionPane.showMessageDialog(this, "Sistem je nasao zaposlene po zadatoj vrednosti", "Poruka", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jtxtFilterKeyReleased

    private void jbtResetujFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtResetujFilterActionPerformed
        jComboKriterijum.setSelectedIndex(0);
    }//GEN-LAST:event_jbtResetujFilterActionPerformed

    private void jbtUlogeLicenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtUlogeLicenceActionPerformed
        lblPoruka.setText(" ");
        int r = jtblZaposleni.getSelectedRow();
        if (r < 0) {
            lblPoruka.setText("Morate prvo odabrati zaposlenog!");
            return;
        }
        Zaposleni z = new Zaposleni();
        z.setJmbg(jtblZaposleni.getValueAt(r, 0).toString());

        try {
            Kontroler.getINSTANCE().staviUMapu("sk", "pregledZaposlenog");
            MainForm mf = (MainForm) Kontroler.getINSTANCE().vratiIzMape("mainForm");
            mf.izmenaPanela("Pregled zaposlenog", new DetaljiZaposlenog(z));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtUlogeLicenceActionPerformed

    private void jtblZaposleniMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblZaposleniMouseClicked
        jbtBrisanje.setVisible(true);
        jbtIzmena.setVisible(true);
        jbtUlogeLicence.setVisible(true);
    }//GEN-LAST:event_jtblZaposleniMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboKriterijum;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtBrisanje;
    private javax.swing.JButton jbtIzmena;
    private javax.swing.JButton jbtResetujFilter;
    private javax.swing.JButton jbtUlogeLicence;
    private javax.swing.JTable jtblZaposleni;
    private javax.swing.JTextField jtxtFilter;
    private javax.swing.JLabel lblPoruka;
    // End of variables declaration//GEN-END:variables

    private List<Zaposleni> listaZaposlenih;

    private void srediFormu() {
        srediTabelu(null);
        popuniCombo();
        jbtBrisanje.setVisible(false);
        jbtIzmena.setVisible(false);
        jbtUlogeLicence.setVisible(false);
    }

    private void srediTabelu(List<Zaposleni> lz) {
        try {
            if (lz == null) {
                TransferKlasa zahtev = new TransferKlasa();
                zahtev.setOperacija(Akcija.VRATI_SVE_ZAPOSLENE);
                Kontroler.getINSTANCE().posalji(zahtev);
                TransferKlasa odgovor = Kontroler.getINSTANCE().primi();
                listaZaposlenih = (List<Zaposleni>) odgovor.getRezultat();
            } else {
                listaZaposlenih = lz;
            }

            TableModel tm = new TableModelZaposleni(listaZaposlenih);
            jtblZaposleni.setModel(tm);

            jtblZaposleni.setAutoCreateRowSorter(true);
            jtblZaposleni.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void popuniCombo() {
        jComboKriterijum.addItem("Bez filtriranja");
        jComboKriterijum.addItem("JMBG");
        jComboKriterijum.addItem("Godina rodjenja");
        jComboKriterijum.addItem("Ime i prezime");
    }
}
