package view.panel;

import domain.Avion;
import domain.TipAviona;
import domain.association.Uloga;
import java.awt.Color;
import java.awt.Desktop;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import model.Kontroler;
import util.Akcija;
import util.TransferKlasa;
import view.MainForm;
import view.pdf.PDFAvion;
import view.table.TableModelAvioni;

/**
 *
 * @author Lazar Vujadinovic
 */
public class PregledAviona extends javax.swing.JPanel {

    /**
     * Creates new form PregledAviona
     */
    public PregledAviona() {
        initComponents();
        srediFormu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtblAvioni = new javax.swing.JTable();
        jbtIzmena = new javax.swing.JButton();
        jbtBrisanje = new javax.swing.JButton();
        jComboKriterijum = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jtxtFilter = new javax.swing.JTextField();
        jbtResetujFilter = new javax.swing.JButton();
        lblPoruka = new javax.swing.JLabel();
        jbtPDF = new javax.swing.JButton();
        jbtUloge = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jtblAvioni.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jtblAvioni);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 550, 300));

        jbtIzmena.setText("Izmeni avion");
        jbtIzmena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtIzmenaActionPerformed(evt);
            }
        });
        add(jbtIzmena, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 130, 190, -1));

        jbtBrisanje.setText("Obrisi avion");
        jbtBrisanje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBrisanjeActionPerformed(evt);
            }
        });
        add(jbtBrisanje, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 170, 190, -1));

        jComboKriterijum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboKriterijumItemStateChanged(evt);
            }
        });
        add(jComboKriterijum, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 30, 190, -1));

        jLabel1.setText("Kriterijum pretrage:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, 190, 20));

        jtxtFilter.setEditable(false);
        jtxtFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxtFilterActionPerformed(evt);
            }
        });
        jtxtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtxtFilterKeyReleased(evt);
            }
        });
        add(jtxtFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 60, 190, -1));

        jbtResetujFilter.setText("Resetuj filter");
        jbtResetujFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtResetujFilterActionPerformed(evt);
            }
        });
        add(jbtResetujFilter, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 90, 190, -1));

        lblPoruka.setText(" ");
        add(lblPoruka, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 290, 190, 20));

        jbtPDF.setText("Prikazi PDF o avionu");
        jbtPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtPDFActionPerformed(evt);
            }
        });
        add(jbtPDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 210, 190, -1));

        jbtUloge.setText("Raspored aviona");
        jbtUloge.setToolTipText("Prikaz rasporeda pilota po datumima i ulogama za odabrani avion");
        jbtUloge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtUlogeActionPerformed(evt);
            }
        });
        add(jbtUloge, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 250, 190, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jComboKriterijumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboKriterijumItemStateChanged
        String izbor = jComboKriterijum.getSelectedItem().toString();
        if (izbor.startsWith("Bez")) {
            jtxtFilter.setEditable(false);
            jtxtFilter.setText("");
            srediTabelu(null);
            jtxtFilter.setBackground(Color.lightGray);
        } else {
            jtxtFilter.setEditable(true);
            jtxtFilter.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_jComboKriterijumItemStateChanged

    private void jtxtFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtxtFilterKeyReleased
        String polje = jComboKriterijum.getSelectedItem().toString();
        String filter = jtxtFilter.getText().toLowerCase();
//        TableModelAvioni tma = (TableModelAvioni) jtblAvioni.getModel();

        switch (polje) {
            case "Naziv":
                for (int i = listaAviona.size() - 1; i >= 0; i--) {
//                    if (!jtblAvioni.getValueAt(i, 0).toString().toLowerCase().contains(filter)) {
                    if (!listaAviona.get(i).getOznaka().toLowerCase().contains(filter)) {
//                        tma.obrisi(i);
                        listaAviona.remove(i);
                    }
                }
                break;
            case "Godina proizvodnje":
                for (int i = listaAviona.size() - 1; i >= 0; i--) {
                    if (!(listaAviona.get(i).getGodinaProizvodnje() + "").contains(filter)) {
                        listaAviona.remove(i);
                    }
                }
                break;
            case "Broj putnika":
                for (int i = listaAviona.size() - 1; i >= 0; i--) {
                    if (!(listaAviona.get(i).getBrojPutnika() + "").contains(filter)) {
                        listaAviona.remove(i);
                    }
                }
                break;
            case "Nosivost":
                for (int i = listaAviona.size() - 1; i >= 0; i--) {
                    if (!(listaAviona.get(i).getNosivost() + "").contains(filter)) {
                        listaAviona.remove(i);
                    }
                }
                break;

            case "Tip":
                for (int i = listaAviona.size() - 1; i >= 0; i--) {
                    if (!listaAviona.get(i).getTip().getNazivTipa().toLowerCase().contains(filter)) {
                        listaAviona.remove(i);
                    }
                }
                break;
        }

        srediTabelu(listaAviona);
        JOptionPane.showMessageDialog(this, "Sistem je nasao avione po zadatoj vrednosti", "Poruka", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jtxtFilterKeyReleased

    private void jbtResetujFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtResetujFilterActionPerformed
        jComboKriterijum.setSelectedIndex(0);
    }//GEN-LAST:event_jbtResetujFilterActionPerformed

    private void jbtBrisanjeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBrisanjeActionPerformed
        try {
            boolean ulogovan = (boolean) Kontroler.getINSTANCE().vratiIzMape("adminUlogovan");
            if (!ulogovan) {
                JOptionPane.showMessageDialog(this, "Da biste izvrsili operaciju brisanja, admin mora biti ulogovan!", "GRESKA", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception ex) {
        }
        lblPoruka.setText(" ");
        int r = jtblAvioni.getSelectedRow();
        if (r < 0) {
            lblPoruka.setText("Morate prvo odabrati avion!");
            return;
        }
        //nije radilo kako treba kad se koristi filter ili se menja redosled sortiranjem, sad radi
        Avion a = new Avion();
        a.setAvionID((int) jtblAvioni.getValueAt(r, 6));

        try {
            TransferKlasa zahtev = new TransferKlasa();
            zahtev.setOperacija(Akcija.BRISI_AVION);
            zahtev.setParametar(a);
            Kontroler.getINSTANCE().posalji(zahtev);
            TransferKlasa odgovor = Kontroler.getINSTANCE().primi();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            TransferKlasa zahtev = new TransferKlasa();
            zahtev.setOperacija(Akcija.VRATI_SVE_AVIONE);
            Kontroler.getINSTANCE().posalji(zahtev);
            TransferKlasa odgovor = Kontroler.getINSTANCE().primi();
            List<Avion> avioni = (List<Avion>) odgovor.getRezultat();
            srediTabelu(avioni);
        } catch (Exception ex) {
            lblPoruka.setText("Nije moguce obrisati.");
        }
    }//GEN-LAST:event_jbtBrisanjeActionPerformed

    private void jbtIzmenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtIzmenaActionPerformed
        lblPoruka.setText(" ");
        int r = jtblAvioni.getSelectedRow();
        if (r < 0) {
            lblPoruka.setText("Morate prvo odabrati avion!");
            return;
        }
        Avion a = new Avion();
        a.setOznaka(jtblAvioni.getValueAt(r, 0).toString());
        a.setGodinaProizvodnje((int) jtblAvioni.getValueAt(r, 1));
        a.setBrojPutnika((int) jtblAvioni.getValueAt(r, 2));
        a.setNosivost((int) jtblAvioni.getValueAt(r, 3));
        a.setTip((TipAviona) jtblAvioni.getValueAt(r, 4));
        a.setAvionID((int) jtblAvioni.getValueAt(r, 6));

        try {
            Kontroler.getINSTANCE().staviUMapu("sk", "izmenaAviona");
            Kontroler.getINSTANCE().staviUMapu("avionZaIzmenu", a);
            MainForm mf = (MainForm) Kontroler.getINSTANCE().vratiIzMape("mainForm");
            mf.izmenaPanela("Izmena aviona", new UnosAviona());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jbtIzmenaActionPerformed

    private void jbtPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPDFActionPerformed
        lblPoruka.setText(" ");
        int r = jtblAvioni.getSelectedRow();
        if (r < 0) {
            lblPoruka.setText("Morate prvo odabrati avion!");
            return;
        }
        Avion a = new Avion();
        a.setOznaka(jtblAvioni.getValueAt(r, 0).toString());
        a.setGodinaProizvodnje((int) jtblAvioni.getValueAt(r, 1));
        a.setBrojPutnika((int) jtblAvioni.getValueAt(r, 2));
        a.setNosivost((int) jtblAvioni.getValueAt(r, 3));
        a.setTip((TipAviona) jtblAvioni.getValueAt(r, 4));
        a.setAvionID((int) jtblAvioni.getValueAt(r, 6));

        try {
            PDFAvion pdf = new PDFAvion();
            pdf.kreirajPDF(a);
            Desktop.getDesktop().open(pdf.getPDF());

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jbtPDFActionPerformed

    private void jbtUlogeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtUlogeActionPerformed
        lblPoruka.setText(" ");
        int r = jtblAvioni.getSelectedRow();
        if (r < 0) {
            lblPoruka.setText("Morate prvo odabrati avion!");
            return;
        }
        Avion a = new Avion();
        a.setOznaka(jtblAvioni.getValueAt(r, 0).toString());
        a.setGodinaProizvodnje((int) jtblAvioni.getValueAt(r, 1));
        a.setBrojPutnika((int) jtblAvioni.getValueAt(r, 2));
        a.setNosivost((int) jtblAvioni.getValueAt(r, 3));
        a.setTip((TipAviona) jtblAvioni.getValueAt(r, 4));
        a.setAvionID((int) jtblAvioni.getValueAt(r, 6));

        try {
            TransferKlasa zahtev = new TransferKlasa();
            zahtev.setOperacija(Akcija.PRETRAZI_ULOGE_PO_KRITERIJUMU);
            zahtev.setParametar(a);
            Kontroler.getINSTANCE().posalji(zahtev);
            TransferKlasa odgovor = Kontroler.getINSTANCE().primi();

            List<Uloga> uloge = (List<Uloga>) odgovor.getRezultat();
            Uloge u = new Uloge(uloge);
            u.setVisible(true);
            Kontroler.getINSTANCE().staviUMapu("sk", "pregledUlogaZaAvion");
            Kontroler.getINSTANCE().staviUMapu("avion", a);
            MainForm mf = (MainForm) Kontroler.getINSTANCE().vratiIzMape("mainForm");
            mf.izmenaPanela("Pregled aviona", new Uloge(uloge));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbtUlogeActionPerformed

    private void jtxtFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxtFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxtFilterActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboKriterijum;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbtBrisanje;
    private javax.swing.JButton jbtIzmena;
    private javax.swing.JButton jbtPDF;
    private javax.swing.JButton jbtResetujFilter;
    private javax.swing.JButton jbtUloge;
    private javax.swing.JTable jtblAvioni;
    private javax.swing.JTextField jtxtFilter;
    private javax.swing.JLabel lblPoruka;
    // End of variables declaration//GEN-END:variables

    private List<Avion> listaAviona;

    private void srediFormu() {
        srediTabelu(null);
        popuniCombo();
    }

    private void srediTabelu(List<Avion> la) {
        try {
            if (la == null) {
                TransferKlasa zahtev = new TransferKlasa();
                zahtev.setOperacija(Akcija.VRATI_SVE_AVIONE);
                Kontroler.getINSTANCE().posalji(zahtev);
                TransferKlasa odgovor = Kontroler.getINSTANCE().primi();
                listaAviona = (List<Avion>) odgovor.getRezultat();
            } else {
                listaAviona = la;
            }

            TableModel tm = new TableModelAvioni(listaAviona);
            jtblAvioni.setModel(tm);

            TableColumnModel tcm = jtblAvioni.getColumnModel();

            //sakrivanje kolone status
            tcm.getColumn(5).setMinWidth(0);
            tcm.getColumn(5).setMaxWidth(0);
            tcm.getColumn(5).setWidth(0);
            //sakrivanje kolone ID
            tcm.getColumn(6).setMinWidth(0);
            tcm.getColumn(6).setMaxWidth(0);
            tcm.getColumn(6).setWidth(0);

            jtblAvioni.setAutoCreateRowSorter(true);
            jtblAvioni.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void popuniCombo() {
        jComboKriterijum.addItem("Bez filtriranja");
        jComboKriterijum.addItem("Naziv");
        jComboKriterijum.addItem("Godina proizvodnje");
        jComboKriterijum.addItem("Broj putnika");
        jComboKriterijum.addItem("Nosivost");
        jComboKriterijum.addItem("Tip");
    }
}
